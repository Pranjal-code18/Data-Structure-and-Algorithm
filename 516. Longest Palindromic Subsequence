class Solution {
public:
    int LCS(string s , string t ,int n ,int m, int dp[][1001]){
        for(int i=0 ; i<n+1 ; i++){
            for(int j=0 ; j<m+1 ; j++){
                if(i==0 || j==0){dp[i][j]=0;}
            }
        }
        for(int i=1 ; i<n+1 ; i++){
            for(int j=1 ; j<m+1 ; j++){
                if(s[i-1]==t[j-1]){
                    dp[i][j]=1+dp[i-1][j-1];
                }
                else{
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return dp[n][m];
    }
    int longestPalindromeSubseq(string s) {
        int n=s.length();
        int dp[1001][1001];
        string t="";
        for(int i=n-1 ; i>=0 ; i--){
            t+=s[i];
        }
        int m=t.length();
        for(int i=0 ; i<1001 ; i++){
            for(int j=0 ; j<1001 ; j++){
                dp[i][j]=-1;
            }
        }
      return LCS(s,t,n,m,dp);
    }
};
